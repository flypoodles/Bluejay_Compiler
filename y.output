Terminals unused in grammar

    INBLOCK


Grammar

    0 $accept: program $end

    1 program: variables functions stmt

    2 variables: ε
    3          | variables variable

    4 variable: VAR NAME TYPE ASSIGN exp SEMICOLON
    5         | IMPLICIT NAME TYPE ASSIGN exp SEMICOLON

    6 funcVars: funcVar funcVars
    7         | funcVar

    8 funcVar: VAR NAME TYPE ASSIGN exp SEMICOLON

    9 stmt: statement
   10     | statement stmt

   11 block: STARTBLOCK stmt ENDBLOCK
   12      | statement
   13      | STARTBLOCK stmt $end

   14 functions: ε
   15          | functions function

   16 function: FUN NAME TYPE args STARTBLOCK funcVars stmt ENDBLOCK
   17         | FUN NAME TYPE args STARTBLOCK stmt ENDBLOCK

   18 args: OPEN_PARENT param CLOSE_PARENT
   19     | OPEN_PARENT CLOSE_PARENT

   20 param: NAME TYPE
   21      | NAME TYPE COMMA param

   22 statement: RETURN exp SEMICOLON
   23          | RETURN SEMICOLON
   24          | IF OPEN_PARENT exp CLOSE_PARENT block ELSE block
   25          | IF OPEN_PARENT exp CLOSE_PARENT block
   26          | WHILE OPEN_PARENT exp CLOSE_PARENT block OTHERWISE block
   27          | WHILE OPEN_PARENT exp CLOSE_PARENT block
   28          | REPEAT OPEN_PARENT exp CLOSE_PARENT block
   29          | NAME ASSIGN exp SEMICOLON
   30          | funcCall SEMICOLON

   31 ternaryEXP: OPEN_PARENT exp CLOSE_PARENT TERNARY exp COLON exp

   32 funcCallParam: exp COMMA funcCallParam
   33              | exp

   34 funcCall: NAME OPEN_PARENT CLOSE_PARENT
   35         | NAME OPEN_PARENT funcCallParam CLOSE_PARENT

   36 exp: INT
   37    | STRING
   38    | OPEN_PARENT exp CLOSE_PARENT
   39    | exp PLUS exp
   40    | exp MINUS exp
   41    | exp MUL exp
   42    | exp DIV exp
   43    | exp REM exp
   44    | exp BOR exp
   45    | exp BAND exp
   46    | exp XOR exp
   47    | exp LT exp
   48    | exp LE exp
   49    | exp GT exp
   50    | exp GE exp
   51    | exp OR exp
   52    | exp AND exp
   53    | NOT exp
   54    | exp EQ exp
   55    | exp NE exp
   56    | NAME
   57    | funcCall
   58    | ternaryEXP


Terminals, with rules where they appear

    $end (0) 0 13
    error (256)
    NAME <name> (258) 4 5 8 16 17 20 21 29 34 35 56
    INT <ival> (259) 36
    STRING <str> (260) 37
    TYPE <type> (261) 4 5 8 16 17 20 21
    TERNARY <ternary> (262) 31
    COLON (263) 31
    INBLOCK (264)
    ENDBLOCK (265) 11 16 17
    STARTBLOCK (266) 11 13 16 17
    COMMA (267) 21 32
    IF (268) 24 25
    WHILE (269) 26 27
    REPEAT (270) 28
    ELSE (271) 24
    OTHERWISE (272) 26
    VAR (273) 4 8
    IMPLICIT (274) 5
    RETURN (275) 22 23
    FUN (276) 16 17
    OPEN_PARENT (277) 18 19 24 25 26 27 28 31 34 35 38
    CLOSE_PARENT (278) 18 19 24 25 26 27 28 31 34 35 38
    SEMICOLON (279) 4 5 8 22 23 29 30
    ASSIGN (280) 4 5 8 29
    OR (281) 51
    AND (282) 52
    BOR (283) 44
    XOR (284) 46
    BAND (285) 45
    EQ (286) 54
    NE (287) 55
    LT (288) 47
    LE (289) 48
    GT (290) 49
    GE (291) 50
    PLUS (292) 39
    MINUS (293) 40
    MUL (294) 41
    DIV (295) 42
    REM (296) 43
    NOT (297) 53


Nonterminals, with rules where they appear

    $accept (43)
        on left: 0
    program (44)
        on left: 1
        on right: 0
    variables <vars> (45)
        on left: 2 3
        on right: 1 3
    variable <var> (46)
        on left: 4 5
        on right: 3
    funcVars <vars> (47)
        on left: 6 7
        on right: 6 16
    funcVar <var> (48)
        on left: 8
        on right: 6 7
    stmt <stmt> (49)
        on left: 9 10
        on right: 1 10 11 13 16 17
    block <stmt> (50)
        on left: 11 12 13
        on right: 24 25 26 27 28
    functions <funcs> (51)
        on left: 14 15
        on right: 1 15
    function <func> (52)
        on left: 16 17
        on right: 15
    args <args> (53)
        on left: 18 19
        on right: 16 17
    param <param> (54)
        on left: 20 21
        on right: 18 21
    statement <statement> (55)
        on left: 22 23 24 25 26 27 28 29 30
        on right: 9 10 12
    ternaryEXP <exp> (56)
        on left: 31
        on right: 58
    funcCallParam <funcCallParam> (57)
        on left: 32 33
        on right: 32 35
    funcCall <exp> (58)
        on left: 34 35
        on right: 30 57
    exp <exp> (59)
        on left: 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58
        on right: 4 5 8 22 24 25 26 27 28 29 31 32 33 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55


State 0

    0 $accept: • program $end

    $default  reduce using rule 2 (variables)

    program    go to state 1
    variables  go to state 2


State 1

    0 $accept: program • $end

    $end  shift, and go to state 3


State 2

    1 program: variables • functions stmt
    3 variables: variables • variable

    VAR       shift, and go to state 4
    IMPLICIT  shift, and go to state 5

    $default  reduce using rule 14 (functions)

    variable   go to state 6
    functions  go to state 7


State 3

    0 $accept: program $end •

    $default  accept


State 4

    4 variable: VAR • NAME TYPE ASSIGN exp SEMICOLON

    NAME  shift, and go to state 8


State 5

    5 variable: IMPLICIT • NAME TYPE ASSIGN exp SEMICOLON

    NAME  shift, and go to state 9


State 6

    3 variables: variables variable •

    $default  reduce using rule 3 (variables)


State 7

    1 program: variables functions • stmt
   15 functions: functions • function

    NAME    shift, and go to state 10
    IF      shift, and go to state 11
    WHILE   shift, and go to state 12
    REPEAT  shift, and go to state 13
    RETURN  shift, and go to state 14
    FUN     shift, and go to state 15

    stmt       go to state 16
    function   go to state 17
    statement  go to state 18
    funcCall   go to state 19


State 8

    4 variable: VAR NAME • TYPE ASSIGN exp SEMICOLON

    TYPE  shift, and go to state 20


State 9

    5 variable: IMPLICIT NAME • TYPE ASSIGN exp SEMICOLON

    TYPE  shift, and go to state 21


State 10

   29 statement: NAME • ASSIGN exp SEMICOLON
   34 funcCall: NAME • OPEN_PARENT CLOSE_PARENT
   35         | NAME • OPEN_PARENT funcCallParam CLOSE_PARENT

    OPEN_PARENT  shift, and go to state 22
    ASSIGN       shift, and go to state 23


State 11

   24 statement: IF • OPEN_PARENT exp CLOSE_PARENT block ELSE block
   25          | IF • OPEN_PARENT exp CLOSE_PARENT block

    OPEN_PARENT  shift, and go to state 24


State 12

   26 statement: WHILE • OPEN_PARENT exp CLOSE_PARENT block OTHERWISE block
   27          | WHILE • OPEN_PARENT exp CLOSE_PARENT block

    OPEN_PARENT  shift, and go to state 25


State 13

   28 statement: REPEAT • OPEN_PARENT exp CLOSE_PARENT block

    OPEN_PARENT  shift, and go to state 26


State 14

   22 statement: RETURN • exp SEMICOLON
   23          | RETURN • SEMICOLON

    NAME         shift, and go to state 27
    INT          shift, and go to state 28
    STRING       shift, and go to state 29
    OPEN_PARENT  shift, and go to state 30
    SEMICOLON    shift, and go to state 31
    NOT          shift, and go to state 32

    ternaryEXP  go to state 33
    funcCall    go to state 34
    exp         go to state 35


State 15

   16 function: FUN • NAME TYPE args STARTBLOCK funcVars stmt ENDBLOCK
   17         | FUN • NAME TYPE args STARTBLOCK stmt ENDBLOCK

    NAME  shift, and go to state 36


State 16

    1 program: variables functions stmt •

    $default  reduce using rule 1 (program)


State 17

   15 functions: functions function •

    $default  reduce using rule 15 (functions)


State 18

    9 stmt: statement •
   10     | statement • stmt

    NAME    shift, and go to state 10
    IF      shift, and go to state 11
    WHILE   shift, and go to state 12
    REPEAT  shift, and go to state 13
    RETURN  shift, and go to state 14

    $default  reduce using rule 9 (stmt)

    stmt       go to state 37
    statement  go to state 18
    funcCall   go to state 19


State 19

   30 statement: funcCall • SEMICOLON

    SEMICOLON  shift, and go to state 38


State 20

    4 variable: VAR NAME TYPE • ASSIGN exp SEMICOLON

    ASSIGN  shift, and go to state 39


State 21

    5 variable: IMPLICIT NAME TYPE • ASSIGN exp SEMICOLON

    ASSIGN  shift, and go to state 40


State 22

   34 funcCall: NAME OPEN_PARENT • CLOSE_PARENT
   35         | NAME OPEN_PARENT • funcCallParam CLOSE_PARENT

    NAME          shift, and go to state 27
    INT           shift, and go to state 28
    STRING        shift, and go to state 29
    OPEN_PARENT   shift, and go to state 30
    CLOSE_PARENT  shift, and go to state 41
    NOT           shift, and go to state 32

    ternaryEXP     go to state 33
    funcCallParam  go to state 42
    funcCall       go to state 34
    exp            go to state 43


State 23

   29 statement: NAME ASSIGN • exp SEMICOLON

    NAME         shift, and go to state 27
    INT          shift, and go to state 28
    STRING       shift, and go to state 29
    OPEN_PARENT  shift, and go to state 30
    NOT          shift, and go to state 32

    ternaryEXP  go to state 33
    funcCall    go to state 34
    exp         go to state 44


State 24

   24 statement: IF OPEN_PARENT • exp CLOSE_PARENT block ELSE block
   25          | IF OPEN_PARENT • exp CLOSE_PARENT block

    NAME         shift, and go to state 27
    INT          shift, and go to state 28
    STRING       shift, and go to state 29
    OPEN_PARENT  shift, and go to state 30
    NOT          shift, and go to state 32

    ternaryEXP  go to state 33
    funcCall    go to state 34
    exp         go to state 45


State 25

   26 statement: WHILE OPEN_PARENT • exp CLOSE_PARENT block OTHERWISE block
   27          | WHILE OPEN_PARENT • exp CLOSE_PARENT block

    NAME         shift, and go to state 27
    INT          shift, and go to state 28
    STRING       shift, and go to state 29
    OPEN_PARENT  shift, and go to state 30
    NOT          shift, and go to state 32

    ternaryEXP  go to state 33
    funcCall    go to state 34
    exp         go to state 46


State 26

   28 statement: REPEAT OPEN_PARENT • exp CLOSE_PARENT block

    NAME         shift, and go to state 27
    INT          shift, and go to state 28
    STRING       shift, and go to state 29
    OPEN_PARENT  shift, and go to state 30
    NOT          shift, and go to state 32

    ternaryEXP  go to state 33
    funcCall    go to state 34
    exp         go to state 47


State 27

   34 funcCall: NAME • OPEN_PARENT CLOSE_PARENT
   35         | NAME • OPEN_PARENT funcCallParam CLOSE_PARENT
   56 exp: NAME •

    OPEN_PARENT  shift, and go to state 22

    $default  reduce using rule 56 (exp)


State 28

   36 exp: INT •

    $default  reduce using rule 36 (exp)


State 29

   37 exp: STRING •

    $default  reduce using rule 37 (exp)


State 30

   31 ternaryEXP: OPEN_PARENT • exp CLOSE_PARENT TERNARY exp COLON exp
   38 exp: OPEN_PARENT • exp CLOSE_PARENT

    NAME         shift, and go to state 27
    INT          shift, and go to state 28
    STRING       shift, and go to state 29
    OPEN_PARENT  shift, and go to state 30
    NOT          shift, and go to state 32

    ternaryEXP  go to state 33
    funcCall    go to state 34
    exp         go to state 48


State 31

   23 statement: RETURN SEMICOLON •

    $default  reduce using rule 23 (statement)


State 32

   53 exp: NOT • exp

    NAME         shift, and go to state 27
    INT          shift, and go to state 28
    STRING       shift, and go to state 29
    OPEN_PARENT  shift, and go to state 30
    NOT          shift, and go to state 32

    ternaryEXP  go to state 33
    funcCall    go to state 34
    exp         go to state 49


State 33

   58 exp: ternaryEXP •

    $default  reduce using rule 58 (exp)


State 34

   57 exp: funcCall •

    $default  reduce using rule 57 (exp)


State 35

   22 statement: RETURN exp • SEMICOLON
   39 exp: exp • PLUS exp
   40    | exp • MINUS exp
   41    | exp • MUL exp
   42    | exp • DIV exp
   43    | exp • REM exp
   44    | exp • BOR exp
   45    | exp • BAND exp
   46    | exp • XOR exp
   47    | exp • LT exp
   48    | exp • LE exp
   49    | exp • GT exp
   50    | exp • GE exp
   51    | exp • OR exp
   52    | exp • AND exp
   54    | exp • EQ exp
   55    | exp • NE exp

    SEMICOLON  shift, and go to state 50
    OR         shift, and go to state 51
    AND        shift, and go to state 52
    BOR        shift, and go to state 53
    XOR        shift, and go to state 54
    BAND       shift, and go to state 55
    EQ         shift, and go to state 56
    NE         shift, and go to state 57
    LT         shift, and go to state 58
    LE         shift, and go to state 59
    GT         shift, and go to state 60
    GE         shift, and go to state 61
    PLUS       shift, and go to state 62
    MINUS      shift, and go to state 63
    MUL        shift, and go to state 64
    DIV        shift, and go to state 65
    REM        shift, and go to state 66


State 36

   16 function: FUN NAME • TYPE args STARTBLOCK funcVars stmt ENDBLOCK
   17         | FUN NAME • TYPE args STARTBLOCK stmt ENDBLOCK

    TYPE  shift, and go to state 67


State 37

   10 stmt: statement stmt •

    $default  reduce using rule 10 (stmt)


State 38

   30 statement: funcCall SEMICOLON •

    $default  reduce using rule 30 (statement)


State 39

    4 variable: VAR NAME TYPE ASSIGN • exp SEMICOLON

    NAME         shift, and go to state 27
    INT          shift, and go to state 28
    STRING       shift, and go to state 29
    OPEN_PARENT  shift, and go to state 30
    NOT          shift, and go to state 32

    ternaryEXP  go to state 33
    funcCall    go to state 34
    exp         go to state 68


State 40

    5 variable: IMPLICIT NAME TYPE ASSIGN • exp SEMICOLON

    NAME         shift, and go to state 27
    INT          shift, and go to state 28
    STRING       shift, and go to state 29
    OPEN_PARENT  shift, and go to state 30
    NOT          shift, and go to state 32

    ternaryEXP  go to state 33
    funcCall    go to state 34
    exp         go to state 69


State 41

   34 funcCall: NAME OPEN_PARENT CLOSE_PARENT •

    $default  reduce using rule 34 (funcCall)


State 42

   35 funcCall: NAME OPEN_PARENT funcCallParam • CLOSE_PARENT

    CLOSE_PARENT  shift, and go to state 70


State 43

   32 funcCallParam: exp • COMMA funcCallParam
   33              | exp •
   39 exp: exp • PLUS exp
   40    | exp • MINUS exp
   41    | exp • MUL exp
   42    | exp • DIV exp
   43    | exp • REM exp
   44    | exp • BOR exp
   45    | exp • BAND exp
   46    | exp • XOR exp
   47    | exp • LT exp
   48    | exp • LE exp
   49    | exp • GT exp
   50    | exp • GE exp
   51    | exp • OR exp
   52    | exp • AND exp
   54    | exp • EQ exp
   55    | exp • NE exp

    COMMA  shift, and go to state 71
    OR     shift, and go to state 51
    AND    shift, and go to state 52
    BOR    shift, and go to state 53
    XOR    shift, and go to state 54
    BAND   shift, and go to state 55
    EQ     shift, and go to state 56
    NE     shift, and go to state 57
    LT     shift, and go to state 58
    LE     shift, and go to state 59
    GT     shift, and go to state 60
    GE     shift, and go to state 61
    PLUS   shift, and go to state 62
    MINUS  shift, and go to state 63
    MUL    shift, and go to state 64
    DIV    shift, and go to state 65
    REM    shift, and go to state 66

    $default  reduce using rule 33 (funcCallParam)


State 44

   29 statement: NAME ASSIGN exp • SEMICOLON
   39 exp: exp • PLUS exp
   40    | exp • MINUS exp
   41    | exp • MUL exp
   42    | exp • DIV exp
   43    | exp • REM exp
   44    | exp • BOR exp
   45    | exp • BAND exp
   46    | exp • XOR exp
   47    | exp • LT exp
   48    | exp • LE exp
   49    | exp • GT exp
   50    | exp • GE exp
   51    | exp • OR exp
   52    | exp • AND exp
   54    | exp • EQ exp
   55    | exp • NE exp

    SEMICOLON  shift, and go to state 72
    OR         shift, and go to state 51
    AND        shift, and go to state 52
    BOR        shift, and go to state 53
    XOR        shift, and go to state 54
    BAND       shift, and go to state 55
    EQ         shift, and go to state 56
    NE         shift, and go to state 57
    LT         shift, and go to state 58
    LE         shift, and go to state 59
    GT         shift, and go to state 60
    GE         shift, and go to state 61
    PLUS       shift, and go to state 62
    MINUS      shift, and go to state 63
    MUL        shift, and go to state 64
    DIV        shift, and go to state 65
    REM        shift, and go to state 66


State 45

   24 statement: IF OPEN_PARENT exp • CLOSE_PARENT block ELSE block
   25          | IF OPEN_PARENT exp • CLOSE_PARENT block
   39 exp: exp • PLUS exp
   40    | exp • MINUS exp
   41    | exp • MUL exp
   42    | exp • DIV exp
   43    | exp • REM exp
   44    | exp • BOR exp
   45    | exp • BAND exp
   46    | exp • XOR exp
   47    | exp • LT exp
   48    | exp • LE exp
   49    | exp • GT exp
   50    | exp • GE exp
   51    | exp • OR exp
   52    | exp • AND exp
   54    | exp • EQ exp
   55    | exp • NE exp

    CLOSE_PARENT  shift, and go to state 73
    OR            shift, and go to state 51
    AND           shift, and go to state 52
    BOR           shift, and go to state 53
    XOR           shift, and go to state 54
    BAND          shift, and go to state 55
    EQ            shift, and go to state 56
    NE            shift, and go to state 57
    LT            shift, and go to state 58
    LE            shift, and go to state 59
    GT            shift, and go to state 60
    GE            shift, and go to state 61
    PLUS          shift, and go to state 62
    MINUS         shift, and go to state 63
    MUL           shift, and go to state 64
    DIV           shift, and go to state 65
    REM           shift, and go to state 66


State 46

   26 statement: WHILE OPEN_PARENT exp • CLOSE_PARENT block OTHERWISE block
   27          | WHILE OPEN_PARENT exp • CLOSE_PARENT block
   39 exp: exp • PLUS exp
   40    | exp • MINUS exp
   41    | exp • MUL exp
   42    | exp • DIV exp
   43    | exp • REM exp
   44    | exp • BOR exp
   45    | exp • BAND exp
   46    | exp • XOR exp
   47    | exp • LT exp
   48    | exp • LE exp
   49    | exp • GT exp
   50    | exp • GE exp
   51    | exp • OR exp
   52    | exp • AND exp
   54    | exp • EQ exp
   55    | exp • NE exp

    CLOSE_PARENT  shift, and go to state 74
    OR            shift, and go to state 51
    AND           shift, and go to state 52
    BOR           shift, and go to state 53
    XOR           shift, and go to state 54
    BAND          shift, and go to state 55
    EQ            shift, and go to state 56
    NE            shift, and go to state 57
    LT            shift, and go to state 58
    LE            shift, and go to state 59
    GT            shift, and go to state 60
    GE            shift, and go to state 61
    PLUS          shift, and go to state 62
    MINUS         shift, and go to state 63
    MUL           shift, and go to state 64
    DIV           shift, and go to state 65
    REM           shift, and go to state 66


State 47

   28 statement: REPEAT OPEN_PARENT exp • CLOSE_PARENT block
   39 exp: exp • PLUS exp
   40    | exp • MINUS exp
   41    | exp • MUL exp
   42    | exp • DIV exp
   43    | exp • REM exp
   44    | exp • BOR exp
   45    | exp • BAND exp
   46    | exp • XOR exp
   47    | exp • LT exp
   48    | exp • LE exp
   49    | exp • GT exp
   50    | exp • GE exp
   51    | exp • OR exp
   52    | exp • AND exp
   54    | exp • EQ exp
   55    | exp • NE exp

    CLOSE_PARENT  shift, and go to state 75
    OR            shift, and go to state 51
    AND           shift, and go to state 52
    BOR           shift, and go to state 53
    XOR           shift, and go to state 54
    BAND          shift, and go to state 55
    EQ            shift, and go to state 56
    NE            shift, and go to state 57
    LT            shift, and go to state 58
    LE            shift, and go to state 59
    GT            shift, and go to state 60
    GE            shift, and go to state 61
    PLUS          shift, and go to state 62
    MINUS         shift, and go to state 63
    MUL           shift, and go to state 64
    DIV           shift, and go to state 65
    REM           shift, and go to state 66


State 48

   31 ternaryEXP: OPEN_PARENT exp • CLOSE_PARENT TERNARY exp COLON exp
   38 exp: OPEN_PARENT exp • CLOSE_PARENT
   39    | exp • PLUS exp
   40    | exp • MINUS exp
   41    | exp • MUL exp
   42    | exp • DIV exp
   43    | exp • REM exp
   44    | exp • BOR exp
   45    | exp • BAND exp
   46    | exp • XOR exp
   47    | exp • LT exp
   48    | exp • LE exp
   49    | exp • GT exp
   50    | exp • GE exp
   51    | exp • OR exp
   52    | exp • AND exp
   54    | exp • EQ exp
   55    | exp • NE exp

    CLOSE_PARENT  shift, and go to state 76
    OR            shift, and go to state 51
    AND           shift, and go to state 52
    BOR           shift, and go to state 53
    XOR           shift, and go to state 54
    BAND          shift, and go to state 55
    EQ            shift, and go to state 56
    NE            shift, and go to state 57
    LT            shift, and go to state 58
    LE            shift, and go to state 59
    GT            shift, and go to state 60
    GE            shift, and go to state 61
    PLUS          shift, and go to state 62
    MINUS         shift, and go to state 63
    MUL           shift, and go to state 64
    DIV           shift, and go to state 65
    REM           shift, and go to state 66


State 49

   39 exp: exp • PLUS exp
   40    | exp • MINUS exp
   41    | exp • MUL exp
   42    | exp • DIV exp
   43    | exp • REM exp
   44    | exp • BOR exp
   45    | exp • BAND exp
   46    | exp • XOR exp
   47    | exp • LT exp
   48    | exp • LE exp
   49    | exp • GT exp
   50    | exp • GE exp
   51    | exp • OR exp
   52    | exp • AND exp
   53    | NOT exp •
   54    | exp • EQ exp
   55    | exp • NE exp

    $default  reduce using rule 53 (exp)


State 50

   22 statement: RETURN exp SEMICOLON •

    $default  reduce using rule 22 (statement)


State 51

   51 exp: exp OR • exp

    NAME         shift, and go to state 27
    INT          shift, and go to state 28
    STRING       shift, and go to state 29
    OPEN_PARENT  shift, and go to state 30
    NOT          shift, and go to state 32

    ternaryEXP  go to state 33
    funcCall    go to state 34
    exp         go to state 77


State 52

   52 exp: exp AND • exp

    NAME         shift, and go to state 27
    INT          shift, and go to state 28
    STRING       shift, and go to state 29
    OPEN_PARENT  shift, and go to state 30
    NOT          shift, and go to state 32

    ternaryEXP  go to state 33
    funcCall    go to state 34
    exp         go to state 78


State 53

   44 exp: exp BOR • exp

    NAME         shift, and go to state 27
    INT          shift, and go to state 28
    STRING       shift, and go to state 29
    OPEN_PARENT  shift, and go to state 30
    NOT          shift, and go to state 32

    ternaryEXP  go to state 33
    funcCall    go to state 34
    exp         go to state 79


State 54

   46 exp: exp XOR • exp

    NAME         shift, and go to state 27
    INT          shift, and go to state 28
    STRING       shift, and go to state 29
    OPEN_PARENT  shift, and go to state 30
    NOT          shift, and go to state 32

    ternaryEXP  go to state 33
    funcCall    go to state 34
    exp         go to state 80


State 55

   45 exp: exp BAND • exp

    NAME         shift, and go to state 27
    INT          shift, and go to state 28
    STRING       shift, and go to state 29
    OPEN_PARENT  shift, and go to state 30
    NOT          shift, and go to state 32

    ternaryEXP  go to state 33
    funcCall    go to state 34
    exp         go to state 81


State 56

   54 exp: exp EQ • exp

    NAME         shift, and go to state 27
    INT          shift, and go to state 28
    STRING       shift, and go to state 29
    OPEN_PARENT  shift, and go to state 30
    NOT          shift, and go to state 32

    ternaryEXP  go to state 33
    funcCall    go to state 34
    exp         go to state 82


State 57

   55 exp: exp NE • exp

    NAME         shift, and go to state 27
    INT          shift, and go to state 28
    STRING       shift, and go to state 29
    OPEN_PARENT  shift, and go to state 30
    NOT          shift, and go to state 32

    ternaryEXP  go to state 33
    funcCall    go to state 34
    exp         go to state 83


State 58

   47 exp: exp LT • exp

    NAME         shift, and go to state 27
    INT          shift, and go to state 28
    STRING       shift, and go to state 29
    OPEN_PARENT  shift, and go to state 30
    NOT          shift, and go to state 32

    ternaryEXP  go to state 33
    funcCall    go to state 34
    exp         go to state 84


State 59

   48 exp: exp LE • exp

    NAME         shift, and go to state 27
    INT          shift, and go to state 28
    STRING       shift, and go to state 29
    OPEN_PARENT  shift, and go to state 30
    NOT          shift, and go to state 32

    ternaryEXP  go to state 33
    funcCall    go to state 34
    exp         go to state 85


State 60

   49 exp: exp GT • exp

    NAME         shift, and go to state 27
    INT          shift, and go to state 28
    STRING       shift, and go to state 29
    OPEN_PARENT  shift, and go to state 30
    NOT          shift, and go to state 32

    ternaryEXP  go to state 33
    funcCall    go to state 34
    exp         go to state 86


State 61

   50 exp: exp GE • exp

    NAME         shift, and go to state 27
    INT          shift, and go to state 28
    STRING       shift, and go to state 29
    OPEN_PARENT  shift, and go to state 30
    NOT          shift, and go to state 32

    ternaryEXP  go to state 33
    funcCall    go to state 34
    exp         go to state 87


State 62

   39 exp: exp PLUS • exp

    NAME         shift, and go to state 27
    INT          shift, and go to state 28
    STRING       shift, and go to state 29
    OPEN_PARENT  shift, and go to state 30
    NOT          shift, and go to state 32

    ternaryEXP  go to state 33
    funcCall    go to state 34
    exp         go to state 88


State 63

   40 exp: exp MINUS • exp

    NAME         shift, and go to state 27
    INT          shift, and go to state 28
    STRING       shift, and go to state 29
    OPEN_PARENT  shift, and go to state 30
    NOT          shift, and go to state 32

    ternaryEXP  go to state 33
    funcCall    go to state 34
    exp         go to state 89


State 64

   41 exp: exp MUL • exp

    NAME         shift, and go to state 27
    INT          shift, and go to state 28
    STRING       shift, and go to state 29
    OPEN_PARENT  shift, and go to state 30
    NOT          shift, and go to state 32

    ternaryEXP  go to state 33
    funcCall    go to state 34
    exp         go to state 90


State 65

   42 exp: exp DIV • exp

    NAME         shift, and go to state 27
    INT          shift, and go to state 28
    STRING       shift, and go to state 29
    OPEN_PARENT  shift, and go to state 30
    NOT          shift, and go to state 32

    ternaryEXP  go to state 33
    funcCall    go to state 34
    exp         go to state 91


State 66

   43 exp: exp REM • exp

    NAME         shift, and go to state 27
    INT          shift, and go to state 28
    STRING       shift, and go to state 29
    OPEN_PARENT  shift, and go to state 30
    NOT          shift, and go to state 32

    ternaryEXP  go to state 33
    funcCall    go to state 34
    exp         go to state 92


State 67

   16 function: FUN NAME TYPE • args STARTBLOCK funcVars stmt ENDBLOCK
   17         | FUN NAME TYPE • args STARTBLOCK stmt ENDBLOCK

    OPEN_PARENT  shift, and go to state 93

    args  go to state 94


State 68

    4 variable: VAR NAME TYPE ASSIGN exp • SEMICOLON
   39 exp: exp • PLUS exp
   40    | exp • MINUS exp
   41    | exp • MUL exp
   42    | exp • DIV exp
   43    | exp • REM exp
   44    | exp • BOR exp
   45    | exp • BAND exp
   46    | exp • XOR exp
   47    | exp • LT exp
   48    | exp • LE exp
   49    | exp • GT exp
   50    | exp • GE exp
   51    | exp • OR exp
   52    | exp • AND exp
   54    | exp • EQ exp
   55    | exp • NE exp

    SEMICOLON  shift, and go to state 95
    OR         shift, and go to state 51
    AND        shift, and go to state 52
    BOR        shift, and go to state 53
    XOR        shift, and go to state 54
    BAND       shift, and go to state 55
    EQ         shift, and go to state 56
    NE         shift, and go to state 57
    LT         shift, and go to state 58
    LE         shift, and go to state 59
    GT         shift, and go to state 60
    GE         shift, and go to state 61
    PLUS       shift, and go to state 62
    MINUS      shift, and go to state 63
    MUL        shift, and go to state 64
    DIV        shift, and go to state 65
    REM        shift, and go to state 66


State 69

    5 variable: IMPLICIT NAME TYPE ASSIGN exp • SEMICOLON
   39 exp: exp • PLUS exp
   40    | exp • MINUS exp
   41    | exp • MUL exp
   42    | exp • DIV exp
   43    | exp • REM exp
   44    | exp • BOR exp
   45    | exp • BAND exp
   46    | exp • XOR exp
   47    | exp • LT exp
   48    | exp • LE exp
   49    | exp • GT exp
   50    | exp • GE exp
   51    | exp • OR exp
   52    | exp • AND exp
   54    | exp • EQ exp
   55    | exp • NE exp

    SEMICOLON  shift, and go to state 96
    OR         shift, and go to state 51
    AND        shift, and go to state 52
    BOR        shift, and go to state 53
    XOR        shift, and go to state 54
    BAND       shift, and go to state 55
    EQ         shift, and go to state 56
    NE         shift, and go to state 57
    LT         shift, and go to state 58
    LE         shift, and go to state 59
    GT         shift, and go to state 60
    GE         shift, and go to state 61
    PLUS       shift, and go to state 62
    MINUS      shift, and go to state 63
    MUL        shift, and go to state 64
    DIV        shift, and go to state 65
    REM        shift, and go to state 66


State 70

   35 funcCall: NAME OPEN_PARENT funcCallParam CLOSE_PARENT •

    $default  reduce using rule 35 (funcCall)


State 71

   32 funcCallParam: exp COMMA • funcCallParam

    NAME         shift, and go to state 27
    INT          shift, and go to state 28
    STRING       shift, and go to state 29
    OPEN_PARENT  shift, and go to state 30
    NOT          shift, and go to state 32

    ternaryEXP     go to state 33
    funcCallParam  go to state 97
    funcCall       go to state 34
    exp            go to state 43


State 72

   29 statement: NAME ASSIGN exp SEMICOLON •

    $default  reduce using rule 29 (statement)


State 73

   24 statement: IF OPEN_PARENT exp CLOSE_PARENT • block ELSE block
   25          | IF OPEN_PARENT exp CLOSE_PARENT • block

    NAME        shift, and go to state 10
    STARTBLOCK  shift, and go to state 98
    IF          shift, and go to state 11
    WHILE       shift, and go to state 12
    REPEAT      shift, and go to state 13
    RETURN      shift, and go to state 14

    block      go to state 99
    statement  go to state 100
    funcCall   go to state 19


State 74

   26 statement: WHILE OPEN_PARENT exp CLOSE_PARENT • block OTHERWISE block
   27          | WHILE OPEN_PARENT exp CLOSE_PARENT • block

    NAME        shift, and go to state 10
    STARTBLOCK  shift, and go to state 98
    IF          shift, and go to state 11
    WHILE       shift, and go to state 12
    REPEAT      shift, and go to state 13
    RETURN      shift, and go to state 14

    block      go to state 101
    statement  go to state 100
    funcCall   go to state 19


State 75

   28 statement: REPEAT OPEN_PARENT exp CLOSE_PARENT • block

    NAME        shift, and go to state 10
    STARTBLOCK  shift, and go to state 98
    IF          shift, and go to state 11
    WHILE       shift, and go to state 12
    REPEAT      shift, and go to state 13
    RETURN      shift, and go to state 14

    block      go to state 102
    statement  go to state 100
    funcCall   go to state 19


State 76

   31 ternaryEXP: OPEN_PARENT exp CLOSE_PARENT • TERNARY exp COLON exp
   38 exp: OPEN_PARENT exp CLOSE_PARENT •

    TERNARY  shift, and go to state 103

    $default  reduce using rule 38 (exp)


State 77

   39 exp: exp • PLUS exp
   40    | exp • MINUS exp
   41    | exp • MUL exp
   42    | exp • DIV exp
   43    | exp • REM exp
   44    | exp • BOR exp
   45    | exp • BAND exp
   46    | exp • XOR exp
   47    | exp • LT exp
   48    | exp • LE exp
   49    | exp • GT exp
   50    | exp • GE exp
   51    | exp • OR exp
   51    | exp OR exp •
   52    | exp • AND exp
   54    | exp • EQ exp
   55    | exp • NE exp

    AND    shift, and go to state 52
    BOR    shift, and go to state 53
    XOR    shift, and go to state 54
    BAND   shift, and go to state 55
    EQ     shift, and go to state 56
    NE     shift, and go to state 57
    LT     shift, and go to state 58
    LE     shift, and go to state 59
    GT     shift, and go to state 60
    GE     shift, and go to state 61
    PLUS   shift, and go to state 62
    MINUS  shift, and go to state 63
    MUL    shift, and go to state 64
    DIV    shift, and go to state 65
    REM    shift, and go to state 66

    $default  reduce using rule 51 (exp)


State 78

   39 exp: exp • PLUS exp
   40    | exp • MINUS exp
   41    | exp • MUL exp
   42    | exp • DIV exp
   43    | exp • REM exp
   44    | exp • BOR exp
   45    | exp • BAND exp
   46    | exp • XOR exp
   47    | exp • LT exp
   48    | exp • LE exp
   49    | exp • GT exp
   50    | exp • GE exp
   51    | exp • OR exp
   52    | exp • AND exp
   52    | exp AND exp •
   54    | exp • EQ exp
   55    | exp • NE exp

    BOR    shift, and go to state 53
    XOR    shift, and go to state 54
    BAND   shift, and go to state 55
    EQ     shift, and go to state 56
    NE     shift, and go to state 57
    LT     shift, and go to state 58
    LE     shift, and go to state 59
    GT     shift, and go to state 60
    GE     shift, and go to state 61
    PLUS   shift, and go to state 62
    MINUS  shift, and go to state 63
    MUL    shift, and go to state 64
    DIV    shift, and go to state 65
    REM    shift, and go to state 66

    $default  reduce using rule 52 (exp)


State 79

   39 exp: exp • PLUS exp
   40    | exp • MINUS exp
   41    | exp • MUL exp
   42    | exp • DIV exp
   43    | exp • REM exp
   44    | exp • BOR exp
   44    | exp BOR exp •
   45    | exp • BAND exp
   46    | exp • XOR exp
   47    | exp • LT exp
   48    | exp • LE exp
   49    | exp • GT exp
   50    | exp • GE exp
   51    | exp • OR exp
   52    | exp • AND exp
   54    | exp • EQ exp
   55    | exp • NE exp

    XOR    shift, and go to state 54
    BAND   shift, and go to state 55
    EQ     shift, and go to state 56
    NE     shift, and go to state 57
    LT     shift, and go to state 58
    LE     shift, and go to state 59
    GT     shift, and go to state 60
    GE     shift, and go to state 61
    PLUS   shift, and go to state 62
    MINUS  shift, and go to state 63
    MUL    shift, and go to state 64
    DIV    shift, and go to state 65
    REM    shift, and go to state 66

    $default  reduce using rule 44 (exp)


State 80

   39 exp: exp • PLUS exp
   40    | exp • MINUS exp
   41    | exp • MUL exp
   42    | exp • DIV exp
   43    | exp • REM exp
   44    | exp • BOR exp
   45    | exp • BAND exp
   46    | exp • XOR exp
   46    | exp XOR exp •
   47    | exp • LT exp
   48    | exp • LE exp
   49    | exp • GT exp
   50    | exp • GE exp
   51    | exp • OR exp
   52    | exp • AND exp
   54    | exp • EQ exp
   55    | exp • NE exp

    BAND   shift, and go to state 55
    EQ     shift, and go to state 56
    NE     shift, and go to state 57
    LT     shift, and go to state 58
    LE     shift, and go to state 59
    GT     shift, and go to state 60
    GE     shift, and go to state 61
    PLUS   shift, and go to state 62
    MINUS  shift, and go to state 63
    MUL    shift, and go to state 64
    DIV    shift, and go to state 65
    REM    shift, and go to state 66

    $default  reduce using rule 46 (exp)


State 81

   39 exp: exp • PLUS exp
   40    | exp • MINUS exp
   41    | exp • MUL exp
   42    | exp • DIV exp
   43    | exp • REM exp
   44    | exp • BOR exp
   45    | exp • BAND exp
   45    | exp BAND exp •
   46    | exp • XOR exp
   47    | exp • LT exp
   48    | exp • LE exp
   49    | exp • GT exp
   50    | exp • GE exp
   51    | exp • OR exp
   52    | exp • AND exp
   54    | exp • EQ exp
   55    | exp • NE exp

    EQ     shift, and go to state 56
    NE     shift, and go to state 57
    LT     shift, and go to state 58
    LE     shift, and go to state 59
    GT     shift, and go to state 60
    GE     shift, and go to state 61
    PLUS   shift, and go to state 62
    MINUS  shift, and go to state 63
    MUL    shift, and go to state 64
    DIV    shift, and go to state 65
    REM    shift, and go to state 66

    $default  reduce using rule 45 (exp)


State 82

   39 exp: exp • PLUS exp
   40    | exp • MINUS exp
   41    | exp • MUL exp
   42    | exp • DIV exp
   43    | exp • REM exp
   44    | exp • BOR exp
   45    | exp • BAND exp
   46    | exp • XOR exp
   47    | exp • LT exp
   48    | exp • LE exp
   49    | exp • GT exp
   50    | exp • GE exp
   51    | exp • OR exp
   52    | exp • AND exp
   54    | exp • EQ exp
   54    | exp EQ exp •
   55    | exp • NE exp

    LT     shift, and go to state 58
    LE     shift, and go to state 59
    GT     shift, and go to state 60
    GE     shift, and go to state 61
    PLUS   shift, and go to state 62
    MINUS  shift, and go to state 63
    MUL    shift, and go to state 64
    DIV    shift, and go to state 65
    REM    shift, and go to state 66

    $default  reduce using rule 54 (exp)


State 83

   39 exp: exp • PLUS exp
   40    | exp • MINUS exp
   41    | exp • MUL exp
   42    | exp • DIV exp
   43    | exp • REM exp
   44    | exp • BOR exp
   45    | exp • BAND exp
   46    | exp • XOR exp
   47    | exp • LT exp
   48    | exp • LE exp
   49    | exp • GT exp
   50    | exp • GE exp
   51    | exp • OR exp
   52    | exp • AND exp
   54    | exp • EQ exp
   55    | exp • NE exp
   55    | exp NE exp •

    LT     shift, and go to state 58
    LE     shift, and go to state 59
    GT     shift, and go to state 60
    GE     shift, and go to state 61
    PLUS   shift, and go to state 62
    MINUS  shift, and go to state 63
    MUL    shift, and go to state 64
    DIV    shift, and go to state 65
    REM    shift, and go to state 66

    $default  reduce using rule 55 (exp)


State 84

   39 exp: exp • PLUS exp
   40    | exp • MINUS exp
   41    | exp • MUL exp
   42    | exp • DIV exp
   43    | exp • REM exp
   44    | exp • BOR exp
   45    | exp • BAND exp
   46    | exp • XOR exp
   47    | exp • LT exp
   47    | exp LT exp •
   48    | exp • LE exp
   49    | exp • GT exp
   50    | exp • GE exp
   51    | exp • OR exp
   52    | exp • AND exp
   54    | exp • EQ exp
   55    | exp • NE exp

    PLUS   shift, and go to state 62
    MINUS  shift, and go to state 63
    MUL    shift, and go to state 64
    DIV    shift, and go to state 65
    REM    shift, and go to state 66

    $default  reduce using rule 47 (exp)


State 85

   39 exp: exp • PLUS exp
   40    | exp • MINUS exp
   41    | exp • MUL exp
   42    | exp • DIV exp
   43    | exp • REM exp
   44    | exp • BOR exp
   45    | exp • BAND exp
   46    | exp • XOR exp
   47    | exp • LT exp
   48    | exp • LE exp
   48    | exp LE exp •
   49    | exp • GT exp
   50    | exp • GE exp
   51    | exp • OR exp
   52    | exp • AND exp
   54    | exp • EQ exp
   55    | exp • NE exp

    PLUS   shift, and go to state 62
    MINUS  shift, and go to state 63
    MUL    shift, and go to state 64
    DIV    shift, and go to state 65
    REM    shift, and go to state 66

    $default  reduce using rule 48 (exp)


State 86

   39 exp: exp • PLUS exp
   40    | exp • MINUS exp
   41    | exp • MUL exp
   42    | exp • DIV exp
   43    | exp • REM exp
   44    | exp • BOR exp
   45    | exp • BAND exp
   46    | exp • XOR exp
   47    | exp • LT exp
   48    | exp • LE exp
   49    | exp • GT exp
   49    | exp GT exp •
   50    | exp • GE exp
   51    | exp • OR exp
   52    | exp • AND exp
   54    | exp • EQ exp
   55    | exp • NE exp

    PLUS   shift, and go to state 62
    MINUS  shift, and go to state 63
    MUL    shift, and go to state 64
    DIV    shift, and go to state 65
    REM    shift, and go to state 66

    $default  reduce using rule 49 (exp)


State 87

   39 exp: exp • PLUS exp
   40    | exp • MINUS exp
   41    | exp • MUL exp
   42    | exp • DIV exp
   43    | exp • REM exp
   44    | exp • BOR exp
   45    | exp • BAND exp
   46    | exp • XOR exp
   47    | exp • LT exp
   48    | exp • LE exp
   49    | exp • GT exp
   50    | exp • GE exp
   50    | exp GE exp •
   51    | exp • OR exp
   52    | exp • AND exp
   54    | exp • EQ exp
   55    | exp • NE exp

    PLUS   shift, and go to state 62
    MINUS  shift, and go to state 63
    MUL    shift, and go to state 64
    DIV    shift, and go to state 65
    REM    shift, and go to state 66

    $default  reduce using rule 50 (exp)


State 88

   39 exp: exp • PLUS exp
   39    | exp PLUS exp •
   40    | exp • MINUS exp
   41    | exp • MUL exp
   42    | exp • DIV exp
   43    | exp • REM exp
   44    | exp • BOR exp
   45    | exp • BAND exp
   46    | exp • XOR exp
   47    | exp • LT exp
   48    | exp • LE exp
   49    | exp • GT exp
   50    | exp • GE exp
   51    | exp • OR exp
   52    | exp • AND exp
   54    | exp • EQ exp
   55    | exp • NE exp

    MUL  shift, and go to state 64
    DIV  shift, and go to state 65
    REM  shift, and go to state 66

    $default  reduce using rule 39 (exp)


State 89

   39 exp: exp • PLUS exp
   40    | exp • MINUS exp
   40    | exp MINUS exp •
   41    | exp • MUL exp
   42    | exp • DIV exp
   43    | exp • REM exp
   44    | exp • BOR exp
   45    | exp • BAND exp
   46    | exp • XOR exp
   47    | exp • LT exp
   48    | exp • LE exp
   49    | exp • GT exp
   50    | exp • GE exp
   51    | exp • OR exp
   52    | exp • AND exp
   54    | exp • EQ exp
   55    | exp • NE exp

    MUL  shift, and go to state 64
    DIV  shift, and go to state 65
    REM  shift, and go to state 66

    $default  reduce using rule 40 (exp)


State 90

   39 exp: exp • PLUS exp
   40    | exp • MINUS exp
   41    | exp • MUL exp
   41    | exp MUL exp •
   42    | exp • DIV exp
   43    | exp • REM exp
   44    | exp • BOR exp
   45    | exp • BAND exp
   46    | exp • XOR exp
   47    | exp • LT exp
   48    | exp • LE exp
   49    | exp • GT exp
   50    | exp • GE exp
   51    | exp • OR exp
   52    | exp • AND exp
   54    | exp • EQ exp
   55    | exp • NE exp

    $default  reduce using rule 41 (exp)


State 91

   39 exp: exp • PLUS exp
   40    | exp • MINUS exp
   41    | exp • MUL exp
   42    | exp • DIV exp
   42    | exp DIV exp •
   43    | exp • REM exp
   44    | exp • BOR exp
   45    | exp • BAND exp
   46    | exp • XOR exp
   47    | exp • LT exp
   48    | exp • LE exp
   49    | exp • GT exp
   50    | exp • GE exp
   51    | exp • OR exp
   52    | exp • AND exp
   54    | exp • EQ exp
   55    | exp • NE exp

    $default  reduce using rule 42 (exp)


State 92

   39 exp: exp • PLUS exp
   40    | exp • MINUS exp
   41    | exp • MUL exp
   42    | exp • DIV exp
   43    | exp • REM exp
   43    | exp REM exp •
   44    | exp • BOR exp
   45    | exp • BAND exp
   46    | exp • XOR exp
   47    | exp • LT exp
   48    | exp • LE exp
   49    | exp • GT exp
   50    | exp • GE exp
   51    | exp • OR exp
   52    | exp • AND exp
   54    | exp • EQ exp
   55    | exp • NE exp

    $default  reduce using rule 43 (exp)


State 93

   18 args: OPEN_PARENT • param CLOSE_PARENT
   19     | OPEN_PARENT • CLOSE_PARENT

    NAME          shift, and go to state 104
    CLOSE_PARENT  shift, and go to state 105

    param  go to state 106


State 94

   16 function: FUN NAME TYPE args • STARTBLOCK funcVars stmt ENDBLOCK
   17         | FUN NAME TYPE args • STARTBLOCK stmt ENDBLOCK

    STARTBLOCK  shift, and go to state 107


State 95

    4 variable: VAR NAME TYPE ASSIGN exp SEMICOLON •

    $default  reduce using rule 4 (variable)


State 96

    5 variable: IMPLICIT NAME TYPE ASSIGN exp SEMICOLON •

    $default  reduce using rule 5 (variable)


State 97

   32 funcCallParam: exp COMMA funcCallParam •

    $default  reduce using rule 32 (funcCallParam)


State 98

   11 block: STARTBLOCK • stmt ENDBLOCK
   13      | STARTBLOCK • stmt $end

    NAME    shift, and go to state 10
    IF      shift, and go to state 11
    WHILE   shift, and go to state 12
    REPEAT  shift, and go to state 13
    RETURN  shift, and go to state 14

    stmt       go to state 108
    statement  go to state 18
    funcCall   go to state 19


State 99

   24 statement: IF OPEN_PARENT exp CLOSE_PARENT block • ELSE block
   25          | IF OPEN_PARENT exp CLOSE_PARENT block •

    ELSE  shift, and go to state 109

    $default  reduce using rule 25 (statement)


State 100

   12 block: statement •

    $default  reduce using rule 12 (block)


State 101

   26 statement: WHILE OPEN_PARENT exp CLOSE_PARENT block • OTHERWISE block
   27          | WHILE OPEN_PARENT exp CLOSE_PARENT block •

    OTHERWISE  shift, and go to state 110

    $default  reduce using rule 27 (statement)


State 102

   28 statement: REPEAT OPEN_PARENT exp CLOSE_PARENT block •

    $default  reduce using rule 28 (statement)


State 103

   31 ternaryEXP: OPEN_PARENT exp CLOSE_PARENT TERNARY • exp COLON exp

    NAME         shift, and go to state 27
    INT          shift, and go to state 28
    STRING       shift, and go to state 29
    OPEN_PARENT  shift, and go to state 30
    NOT          shift, and go to state 32

    ternaryEXP  go to state 33
    funcCall    go to state 34
    exp         go to state 111


State 104

   20 param: NAME • TYPE
   21      | NAME • TYPE COMMA param

    TYPE  shift, and go to state 112


State 105

   19 args: OPEN_PARENT CLOSE_PARENT •

    $default  reduce using rule 19 (args)


State 106

   18 args: OPEN_PARENT param • CLOSE_PARENT

    CLOSE_PARENT  shift, and go to state 113


State 107

   16 function: FUN NAME TYPE args STARTBLOCK • funcVars stmt ENDBLOCK
   17         | FUN NAME TYPE args STARTBLOCK • stmt ENDBLOCK

    NAME    shift, and go to state 10
    IF      shift, and go to state 11
    WHILE   shift, and go to state 12
    REPEAT  shift, and go to state 13
    VAR     shift, and go to state 114
    RETURN  shift, and go to state 14

    funcVars   go to state 115
    funcVar    go to state 116
    stmt       go to state 117
    statement  go to state 18
    funcCall   go to state 19


State 108

   11 block: STARTBLOCK stmt • ENDBLOCK
   13      | STARTBLOCK stmt • $end

    $end      shift, and go to state 118
    ENDBLOCK  shift, and go to state 119


State 109

   24 statement: IF OPEN_PARENT exp CLOSE_PARENT block ELSE • block

    NAME        shift, and go to state 10
    STARTBLOCK  shift, and go to state 98
    IF          shift, and go to state 11
    WHILE       shift, and go to state 12
    REPEAT      shift, and go to state 13
    RETURN      shift, and go to state 14

    block      go to state 120
    statement  go to state 100
    funcCall   go to state 19


State 110

   26 statement: WHILE OPEN_PARENT exp CLOSE_PARENT block OTHERWISE • block

    NAME        shift, and go to state 10
    STARTBLOCK  shift, and go to state 98
    IF          shift, and go to state 11
    WHILE       shift, and go to state 12
    REPEAT      shift, and go to state 13
    RETURN      shift, and go to state 14

    block      go to state 121
    statement  go to state 100
    funcCall   go to state 19


State 111

   31 ternaryEXP: OPEN_PARENT exp CLOSE_PARENT TERNARY exp • COLON exp
   39 exp: exp • PLUS exp
   40    | exp • MINUS exp
   41    | exp • MUL exp
   42    | exp • DIV exp
   43    | exp • REM exp
   44    | exp • BOR exp
   45    | exp • BAND exp
   46    | exp • XOR exp
   47    | exp • LT exp
   48    | exp • LE exp
   49    | exp • GT exp
   50    | exp • GE exp
   51    | exp • OR exp
   52    | exp • AND exp
   54    | exp • EQ exp
   55    | exp • NE exp

    COLON  shift, and go to state 122
    OR     shift, and go to state 51
    AND    shift, and go to state 52
    BOR    shift, and go to state 53
    XOR    shift, and go to state 54
    BAND   shift, and go to state 55
    EQ     shift, and go to state 56
    NE     shift, and go to state 57
    LT     shift, and go to state 58
    LE     shift, and go to state 59
    GT     shift, and go to state 60
    GE     shift, and go to state 61
    PLUS   shift, and go to state 62
    MINUS  shift, and go to state 63
    MUL    shift, and go to state 64
    DIV    shift, and go to state 65
    REM    shift, and go to state 66


State 112

   20 param: NAME TYPE •
   21      | NAME TYPE • COMMA param

    COMMA  shift, and go to state 123

    $default  reduce using rule 20 (param)


State 113

   18 args: OPEN_PARENT param CLOSE_PARENT •

    $default  reduce using rule 18 (args)


State 114

    8 funcVar: VAR • NAME TYPE ASSIGN exp SEMICOLON

    NAME  shift, and go to state 124


State 115

   16 function: FUN NAME TYPE args STARTBLOCK funcVars • stmt ENDBLOCK

    NAME    shift, and go to state 10
    IF      shift, and go to state 11
    WHILE   shift, and go to state 12
    REPEAT  shift, and go to state 13
    RETURN  shift, and go to state 14

    stmt       go to state 125
    statement  go to state 18
    funcCall   go to state 19


State 116

    6 funcVars: funcVar • funcVars
    7         | funcVar •

    VAR  shift, and go to state 114

    $default  reduce using rule 7 (funcVars)

    funcVars  go to state 126
    funcVar   go to state 116


State 117

   17 function: FUN NAME TYPE args STARTBLOCK stmt • ENDBLOCK

    ENDBLOCK  shift, and go to state 127


State 118

   13 block: STARTBLOCK stmt $end •

    $default  reduce using rule 13 (block)


State 119

   11 block: STARTBLOCK stmt ENDBLOCK •

    $default  reduce using rule 11 (block)


State 120

   24 statement: IF OPEN_PARENT exp CLOSE_PARENT block ELSE block •

    $default  reduce using rule 24 (statement)


State 121

   26 statement: WHILE OPEN_PARENT exp CLOSE_PARENT block OTHERWISE block •

    $default  reduce using rule 26 (statement)


State 122

   31 ternaryEXP: OPEN_PARENT exp CLOSE_PARENT TERNARY exp COLON • exp

    NAME         shift, and go to state 27
    INT          shift, and go to state 28
    STRING       shift, and go to state 29
    OPEN_PARENT  shift, and go to state 30
    NOT          shift, and go to state 32

    ternaryEXP  go to state 33
    funcCall    go to state 34
    exp         go to state 128


State 123

   21 param: NAME TYPE COMMA • param

    NAME  shift, and go to state 104

    param  go to state 129


State 124

    8 funcVar: VAR NAME • TYPE ASSIGN exp SEMICOLON

    TYPE  shift, and go to state 130


State 125

   16 function: FUN NAME TYPE args STARTBLOCK funcVars stmt • ENDBLOCK

    ENDBLOCK  shift, and go to state 131


State 126

    6 funcVars: funcVar funcVars •

    $default  reduce using rule 6 (funcVars)


State 127

   17 function: FUN NAME TYPE args STARTBLOCK stmt ENDBLOCK •

    $default  reduce using rule 17 (function)


State 128

   31 ternaryEXP: OPEN_PARENT exp CLOSE_PARENT TERNARY exp COLON exp •
   39 exp: exp • PLUS exp
   40    | exp • MINUS exp
   41    | exp • MUL exp
   42    | exp • DIV exp
   43    | exp • REM exp
   44    | exp • BOR exp
   45    | exp • BAND exp
   46    | exp • XOR exp
   47    | exp • LT exp
   48    | exp • LE exp
   49    | exp • GT exp
   50    | exp • GE exp
   51    | exp • OR exp
   52    | exp • AND exp
   54    | exp • EQ exp
   55    | exp • NE exp

    OR     shift, and go to state 51
    AND    shift, and go to state 52
    BOR    shift, and go to state 53
    XOR    shift, and go to state 54
    BAND   shift, and go to state 55
    EQ     shift, and go to state 56
    NE     shift, and go to state 57
    LT     shift, and go to state 58
    LE     shift, and go to state 59
    GT     shift, and go to state 60
    GE     shift, and go to state 61
    PLUS   shift, and go to state 62
    MINUS  shift, and go to state 63
    MUL    shift, and go to state 64
    DIV    shift, and go to state 65
    REM    shift, and go to state 66

    $default  reduce using rule 31 (ternaryEXP)


State 129

   21 param: NAME TYPE COMMA param •

    $default  reduce using rule 21 (param)


State 130

    8 funcVar: VAR NAME TYPE • ASSIGN exp SEMICOLON

    ASSIGN  shift, and go to state 132


State 131

   16 function: FUN NAME TYPE args STARTBLOCK funcVars stmt ENDBLOCK •

    $default  reduce using rule 16 (function)


State 132

    8 funcVar: VAR NAME TYPE ASSIGN • exp SEMICOLON

    NAME         shift, and go to state 27
    INT          shift, and go to state 28
    STRING       shift, and go to state 29
    OPEN_PARENT  shift, and go to state 30
    NOT          shift, and go to state 32

    ternaryEXP  go to state 33
    funcCall    go to state 34
    exp         go to state 133


State 133

    8 funcVar: VAR NAME TYPE ASSIGN exp • SEMICOLON
   39 exp: exp • PLUS exp
   40    | exp • MINUS exp
   41    | exp • MUL exp
   42    | exp • DIV exp
   43    | exp • REM exp
   44    | exp • BOR exp
   45    | exp • BAND exp
   46    | exp • XOR exp
   47    | exp • LT exp
   48    | exp • LE exp
   49    | exp • GT exp
   50    | exp • GE exp
   51    | exp • OR exp
   52    | exp • AND exp
   54    | exp • EQ exp
   55    | exp • NE exp

    SEMICOLON  shift, and go to state 134
    OR         shift, and go to state 51
    AND        shift, and go to state 52
    BOR        shift, and go to state 53
    XOR        shift, and go to state 54
    BAND       shift, and go to state 55
    EQ         shift, and go to state 56
    NE         shift, and go to state 57
    LT         shift, and go to state 58
    LE         shift, and go to state 59
    GT         shift, and go to state 60
    GE         shift, and go to state 61
    PLUS       shift, and go to state 62
    MINUS      shift, and go to state 63
    MUL        shift, and go to state 64
    DIV        shift, and go to state 65
    REM        shift, and go to state 66


State 134

    8 funcVar: VAR NAME TYPE ASSIGN exp SEMICOLON •

    $default  reduce using rule 8 (funcVar)
